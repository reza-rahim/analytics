---

- name: Install jre
  apt:
    name: '{{ java_jdk }}'
    update_cache: yes

- name: Check that the hive_install_dir exists
  stat:
      path: '{{ hive_metastore_install_dir }}'
  register: stat_result

- name: create group hive
  group:
    name: '{{ hive_user }}'
    state: present
  when: not stat_result.stat.exists

- name: Create user hive
  user:
    name: '{{ hive_user }}'
    group: '{{ hive_user }}'
    shell: /bin/bash
  when: not stat_result.stat.exists   

- name : extract hadoop  zip
  unarchive:
     src: '{{ hadoop_url }}'
     dest: /opt
     remote_src: true
     owner: '{{ hive_user}}'
     group: '{{ hive_user }}'
  when: not stat_result.stat.exists  

- name: create soft link to /opt/hadoop
  file:
    src: '/opt/{{ hadoop_file_name }}'
    dest: '{{ hadoop_install_dir }}'
    state: link
    owner: '{{ hive_user}}'
    group: '{{ hive_user }}'
  when: not stat_result.stat.exists


- name : extract hive-metastore  zip
  unarchive:
     src: '{{ hive_metastore_url }}'
     dest: /opt
     remote_src: true
     owner: '{{ hive_user}}'
     group: '{{ hive_user }}'
  when: not stat_result.stat.exists

- name: create soft link to /opt/hive
  file:
    src: '/opt/{{ hive_metastore_file_name }}'
    dest: '{{ hive_metastore_install_dir }}'
    state: link
    owner: '{{ hive_user}}'
    group: '{{ hive_user }}'
  when: not stat_result.stat.exists

- name :  get postgresql connector
  get_url:
     url: '{{ postgresql_connector_url }}'
     dest: '{{ hive_metastore_install_dir }}/lib'
     owner: '{{ hive_user}}'
     group: '{{ hive_user }}'
  when: not stat_result.stat.exists

- name: copy hive files
  template: src='{{ item.src }}' dest='{{ item.dest }}'  mode='{{ item.mode }}' owner='{{ hive_user }}' group='{{ hive_user }}'
  loop:
     - { src: 'metastore-site.xml.j2', dest: '{{ hive_metastore_install_dir }}/conf/metastore-site.xml', mode: '0644'  }
     - { src: 'start_hive_metastore.sh.j2', dest: '{{ hive_metastore_install_dir }}/bin/start_hive_metastore.sh', mode: '0755'  }
